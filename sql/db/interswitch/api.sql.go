// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: api.sql

package dbi

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const logApiRequest = `-- name: LogApiRequest :one
insert into interswitch.api_calls (
  request_id, remote_ip, method, url, request
) values (
  $1, $2, $3, $4, $5
) returning request_id, remote_ip, method, url, request, response, response_code, initiated_at, completed_at
`

type LogApiRequestParams struct {
	RequestID uuid.UUID    `json:"requestID"`
	RemoteIp  string       `json:"remoteIp"`
	Method    string       `json:"method"`
	Url       string       `json:"url"`
	Request   pgtype.JSONB `json:"request"`
}

func (q *Queries) LogApiRequest(ctx context.Context, arg LogApiRequestParams) (InterswitchApiCall, error) {
	row := q.db.QueryRow(ctx, logApiRequest,
		arg.RequestID,
		arg.RemoteIp,
		arg.Method,
		arg.Url,
		arg.Request,
	)
	var i InterswitchApiCall
	err := row.Scan(
		&i.RequestID,
		&i.RemoteIp,
		&i.Method,
		&i.Url,
		&i.Request,
		&i.Response,
		&i.ResponseCode,
		&i.InitiatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const logApiResponse = `-- name: LogApiResponse :one
update interswitch.api_calls
set response_code = $1::int,
         response = $2,
     completed_at = now()
where
  request_id= $3
returning request_id, remote_ip, method, url, request, response, response_code, initiated_at, completed_at
`

type LogApiResponseParams struct {
	ResponseCode int32        `json:"responseCode"`
	Response     pgtype.JSONB `json:"response"`
	RequestID    uuid.UUID    `json:"requestID"`
}

func (q *Queries) LogApiResponse(ctx context.Context, arg LogApiResponseParams) (InterswitchApiCall, error) {
	row := q.db.QueryRow(ctx, logApiResponse, arg.ResponseCode, arg.Response, arg.RequestID)
	var i InterswitchApiCall
	err := row.Scan(
		&i.RequestID,
		&i.RemoteIp,
		&i.Method,
		&i.Url,
		&i.Request,
		&i.Response,
		&i.ResponseCode,
		&i.InitiatedAt,
		&i.CompletedAt,
	)
	return i, err
}
